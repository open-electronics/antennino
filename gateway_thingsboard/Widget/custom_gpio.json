{
  "widgetsBundle": {
    "alias": "antennino_gpio",
    "title": "Custom GPIO",
    "image": null
  },
  "widgetTypes": [
    {
      "alias": "antennino_gpio2",
      "name": "Custom GPIO",
      "descriptor": {
        "type": "rpc",
        "sizeX": 4,
        "sizeY": 2,
        "resources": [],
        "templateHtml": "<fieldset class=\"gpio-panel\" ng-disabled=\"!rpcEnabled || executingRpcRequest\" style=\"height: 100%;\">\n \n\n\n\n\n<section class=\"gpio-row\" layout=\"row\" ng-repeat=\"row in rows track by $index\" \n            ng-style=\"{'height': prefferedRowHeight+'px'}\">\n        <section flex layout=\"row\" ng-repeat=\"cell in row track by $index\">\n            <section layout=\"row\" flex ng-if=\"cell\" layout-align=\"{{$index===0 ? 'end center' : 'start center'}}\">\n                <span class=\"gpio-left-label\" ng-show=\"$index===0\">{{ cell.label }}</span>\n                <section layout=\"row\" class=\"switch-panel\" layout-align=\"start center\" ng-class=\"$index===0 ? 'col-0' : 'col-1'\"\n                      ng-style=\"{'height': prefferedRowHeight+'px', 'backgroundColor': '{{ switchPanelBackgroundColor }}'}\">\n                    <span class=\"pin\" ng-show=\"$index===0\">{{cell.pin}}</span>\n                    <span flex ng-show=\"$index===1\"></span>\n                    <md-switch\n                        aria-label=\"{{ cell.label }}\"\n                        ng-disabled=\"!rpcEnabled || executingRpcRequest\"\n                        ng-model=\"cell.enabled\" \n                        ng-change=\"cell.enabled = !cell.enabled\" \n                        ng-click=\"gpioClick($event, cell)\">\n                    </md-switch>\n                    <span flex ng-show=\"$index===0\"></span>\n                    <span class=\"pin\" ng-show=\"$index===1\">{{cell.pin}}</span>\n                </section>\n                <span class=\"gpio-right-label\" ng-show=\"$index===1\">{{ cell.label }}</span>\n            </section>\n            <section layout=\"row\" flex ng-if=\"!cell\">\n                <span flex ng-show=\"$index===0\"></span>\n                <span class=\"switch-panel\"\n                      ng-style=\"{'height': prefferedRowHeight+'px', 'backgroundColor': '{{ switchPanelBackgroundColor }}'}\"></span>\n                <span flex ng-show=\"$index===1\"></span>\n            </section>\n        </section>\n    </section>                            \n    <span class=\"error\" style=\"position: absolute; bottom: 5px;\" ng-show=\"rpcErrorText\">{{rpcErrorText}}</span>\n    <md-progress-linear ng-show=\"executingRpcRequest\" style=\"position: absolute; bottom: 0;\" md-mode=\"indeterminate\"></md-progress-linear>    \n</fieldset>",
        "templateCss": ".error {\n    font-size: 14px !important;\n    color: maroon;/*rgb(250,250,250);*/\n    background-color: transparent;\n    padding: 6px;\n}\n\n.error span {\n    margin: auto;\n}\n\n.gpio-panel {\n    padding-top: 10px;\n    white-space: nowrap;\n}\n\n.switch-panel {\n    margin: 0;\n    height: 32px;\n    width: 66px;\n    min-width: 66px;\n}\n\n.switch-panel md-switch {\n    margin: 0;\n    width: 36px;\n    min-width: 36px;\n}\n\n.switch-panel md-switch > div.md-container {\n    margin: 0;\n}\n\n.switch-panel.col-0 md-switch {\n    padding-left: 8px;\n    padding-right: 4px;\n}\n\n.switch-panel.col-1 md-switch {\n    padding-left: 4px;\n    padding-right: 8px;\n}\n\n.gpio-row {\n    height: 32px;\n}\n\n.pin {\n    margin-top: auto;\n    margin-bottom: auto;\n    color: white;\n    font-size: 12px;\n    width: 16px;\n    min-width: 16px;\n}\n\n.switch-panel.col-0 .pin {\n    margin-left: auto;\n    padding-left: 2px;\n    text-align: right;\n}\n\n.switch-panel.col-1 .pin {\n    margin-right: auto;\n    \n    text-align: left;\n}\n\n.gpio-left-label {\n    margin-right: 8px;\n}\n\n.gpio-right-label {\n    margin-left: 8px;\n}",
        "controllerScript": "self.onInit = function() {\r\n \r\nvar i, gpio;\r\nvar scope = self.ctx.$scope;\r\nvar settings = self.ctx.settings;\r\nscope.gpioList = [];\r\nscope.pinlist= ''; \r\nscope.target=0;\r\n\r\n\r\n\r\ntry {\r\n    var stateId = self.ctx.stateController.getStateId();\r\n    var params = self.ctx.stateController.getStateParams();\r\n    var device = params.entityName;\r\n    scope.target = device.substr(device.indexOf(\"_\") + 1)\r\n    console.log(\"target: \" + scope.target); \r\n} catch (e) {\r\n    \r\n}\r\n    \r\n    \r\n \r\nfor (var g = 0; g < settings.gpioList.length; g++) {\r\n        gpio = settings.gpioList[g];\r\n        scope.gpioList.push(\r\n            {\r\n                row: gpio.row,\r\n                col: gpio.col,\r\n                pin: gpio.pin,\r\n                label: gpio.label,\r\n                enabled: false\r\n            }\r\n        );\r\n        \r\n        scope.pinlist = scope.pinlist + ';' + gpio.pin;\r\n        scope.pinlist = scope.pinlist.substring(1);\r\n    }\r\n\r\n    //alert (scope.pinlist);\r\n\r\n\r\n    scope.requestTimeout = settings.requestTimeout || 1000;\r\n\r\n    scope.switchPanelBackgroundColor = settings.switchPanelBackgroundColor || tinycolor('green').lighten(2).toRgbString();\r\n\r\n\r\n\r\n    scope.gpioStatusRequest = {\r\n        method: \"getGpioStatus\",\r\n        paramsBody: \"{}\"\r\n    };\r\n    \r\n    \r\n    \r\n    if (settings.gpioStatusRequest) {\r\n        scope.gpioStatusRequest.method = settings.gpioStatusRequest.method || scope.gpioStatusRequest.method;\r\n        scope.gpioStatusRequest.paramsBody = settings.gpioStatusRequest.paramsBody || scope.gpioStatusRequest.paramsBody;\r\n    }\r\n    \r\n    \r\n    \r\n    scope.gpioStatusChangeRequest = {\r\n        method: \"setGpioStatus\",\r\n        paramsBody: \"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"\r\n    };\r\n    \r\n    \r\n    \r\n    if (settings.gpioStatusChangeRequest) {\r\n        scope.gpioStatusChangeRequest.method = settings.gpioStatusChangeRequest.method || scope.gpioStatusChangeRequest.method;\r\n        scope.gpioStatusChangeRequest.paramsBody = settings.gpioStatusChangeRequest.paramsBody || scope.gpioStatusChangeRequest.paramsBody;\r\n    }\r\n    \r\n    scope.parseGpioStatusFunction = \"return body[pin] === true;\";\r\n    \r\n    if (settings.parseGpioStatusFunction && settings.parseGpioStatusFunction.length > 0) {\r\n        scope.parseGpioStatusFunction = settings.parseGpioStatusFunction;\r\n    }\r\n    \r\n    \r\n    scope.parseGpioStatusFunction = new Function(\"body, pin\", scope.parseGpioStatusFunction);\r\n    \r\n    \r\n    \r\n    function requestGpioStatus() {\r\n        var paramsBody = scope.gpioStatusRequest.paramsBody;\r\n        \r\n        \r\n        var requestBody = JSON.parse(paramsBody.replace(\"\\\"{$target}\\\"\", scope.target).replace(\"\\\"{$pinlist}\\\"\", scope.pinlist) );\r\n        \r\n               \r\n        console.log(\"requestGpioStatus - requestBody: \" + JSON.stringify(requestBody)); \r\n        self.ctx.controlApi.sendTwoWayCommand(scope.gpioStatusRequest.method,requestBody, scope.requestTimeout)\r\n            .then(\r\n                function success(responseBody) {\r\n                    for (var g = 0; g < scope.gpioList.length; g++) {\r\n                        var gpio = scope.gpioList[g];\r\n                        var enabled = scope.parseGpioStatusFunction.apply(this, [responseBody, gpio.pin]);\r\n                        gpio.enabled = enabled;                        \r\n                    }\r\n                }\r\n            );\r\n    }\r\n    \r\n    \r\n    function changeGpioStatus(gpio) {\r\n        var pin = gpio.pin + '';\r\n        var enabled = !gpio.enabled;\r\n        enabled = enabled === true ? 'true' : 'false';\r\n        var paramsBody = scope.gpioStatusChangeRequest.paramsBody;\r\n        var requestBody = JSON.parse(paramsBody.replace(\"\\\"{$pin}\\\"\", pin).replace(\"\\\"{$enabled}\\\"\", enabled).replace(\"\\\"{$target}\\\"\", scope.target)  );\r\n        console.log(\"changeGpioStatus - requestBody: \" + JSON.stringify(requestBody));\r\n        self.ctx.controlApi.sendTwoWayCommand(scope.gpioStatusChangeRequest.method,requestBody, scope.requestTimeout)\r\n        .then(\r\n            function success(responseBody) {\r\n             var enabled = scope.parseGpioStatusFunction.apply(this, [responseBody, gpio.pin]);\r\n             gpio.enabled = enabled;\r\n            }\r\n        );\r\n    }\r\n    \r\n    scope.gpioCells = {};\r\n    var rowCount = 0;\r\n    for (i = 0; i < scope.gpioList.length; i++) {\r\n        gpio = scope.gpioList[i];\r\n        scope.gpioCells[gpio.row+'_'+gpio.col] = gpio;\r\n        rowCount = Math.max(rowCount, gpio.row+1);\r\n    }\r\n    \r\n    scope.prefferedRowHeight = 32;\r\n    scope.rows = [];\r\n    for (i = 0; i < rowCount; i++) {\r\n        var row = [];\r\n        for (var c =0; c<2;c++) {\r\n            if (scope.gpioCells[i+'_'+c]) {\r\n                row[c] = scope.gpioCells[i+'_'+c];\r\n            } else {\r\n                row[c] = null;\r\n            }\r\n        }\r\n        scope.rows.push(row);\r\n    }\r\n\r\n    scope.gpioClick = function($event, gpio) {\r\n        changeGpioStatus(gpio);\r\n    };\r\n\r\n    requestGpioStatus();    \r\n    \r\n    self.onResize();\r\n}\r\n\r\nself.onResize = function() {\r\n    var scope = self.ctx.$scope;\r\n    var rowCount = scope.rows.length;\r\n    var prefferedRowHeight = (self.ctx.height - 35)/rowCount;\r\n    prefferedRowHeight = Math.min(32, prefferedRowHeight);\r\n    prefferedRowHeight = Math.max(12, prefferedRowHeight);\r\n    scope.prefferedRowHeight = prefferedRowHeight;\r\n    var ratio = prefferedRowHeight/32;\r\n    var switches = $('md-switch', self.ctx.$container);\r\n    switches.css('height', 30*ratio+'px');\r\n    switches.css('width', 36*ratio+'px');\r\n    switches.css('min-width', 36*ratio+'px');\r\n    $('.md-container', switches).css('height', 24*ratio+'px');\r\n    $('.md-container', switches).css('width', 36*ratio+'px');\r\n    var bars = $('.md-bar', self.ctx.$container);\r\n    bars.css('height', 14*ratio+'px');\r\n    bars.css('width', 34*ratio+'px');\r\n    var thumbs = $('.md-thumb', self.ctx.$container);\r\n    thumbs.css('height', 20*ratio+'px');\r\n    thumbs.css('width', 20*ratio+'px');\r\n    \r\n    var leftLabels = $('.gpio-left-label', self.ctx.$container);\r\n    leftLabels.css('font-size', 16*ratio+'px');\r\n    var rightLabels = $('.gpio-right-label', self.ctx.$container);\r\n    rightLabels.css('font-size', 16*ratio+'px');\r\n    var pins = $('.pin', self.ctx.$container);\r\n    var pinsFontSize = Math.max(9, 12*ratio);\r\n    pins.css('font-size', pinsFontSize+'px');    \r\n}\r\n\r\nself.onDestroy = function() {\r\n}\r\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"gpioList\": {\n                \"title\": \"Gpio switches\",\n                \"type\": \"array\",\n                \"minItems\" : 1,\n                \"maxItems\" : 1,\n                \"items\": {\n                    \"title\": \"Gpio switch\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"pin\": {\n                            \"title\": \"Pin\",\n                            \"type\": \"number\"\n                        },\n                        \"label\": {\n                            \"title\": \"Label\",\n                            \"type\": \"string\"\n                        },\n                        \"row\": {\n                            \"title\": \"Row\",\n                            \"type\": \"number\"\n                        },\n                        \"col\": {\n                            \"title\": \"Column\",\n                            \"type\": \"number\"\n                        }\n                    },\n                    \"required\": [\"pin\", \"label\", \"row\", \"col\"]\n                }\n            },\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 1200\n            },\n            \"switchPanelBackgroundColor\": {\n                \"title\": \"Switches panel background color\",\n                \"type\": \"string\",\n                \"default\": \"#008a00\"\n            },\n            \"gpioStatusRequest\": {\n                \"title\": \"GPIO status request\",\n                \"type\": \"object\",\n                 \"properties\": {\n                    \"method\": {\n                        \"title\": \"Method name\",\n                        \"type\": \"string\",\n                        \"default\": \"getGpioStatus\"\n                    },\n                    \"paramsBody\": {\n                      \"title\": \"Method body\",\n                      \"type\": \"string\",\n                      \"default\": \"{\\n \\\"target\\\": \\\"{$target}\\\"\\n  \\\"pin\\\": \\\"{$pinlist}\\\"\\n}\"\n                    }\n                },\n                \"required\": [\"method\", \"paramsBody\"]\n            },\n            \"gpioStatusChangeRequest\": {\n                \"title\": \"GPIO status change request\",\n                \"type\": \"object\",\n                 \"properties\": {\n                    \"method\": {\n                        \"title\": \"Method name\",\n                        \"type\": \"string\",\n                        \"default\": \"setGpioStatus\"\n                    },\n                    \"paramsBody\": {\n                      \"title\": \"Method body\",\n                      \"type\": \"string\",\n                      \"default\": \"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\",\\n \\\"target\\\": \\\"{$target}\\\"\\n}\"\n                    }\n                },\n                \"required\": [\"method\", \"paramsBody\"]\n            },\n            \"parseGpioStatusFunction\": {\n                \"title\": \"Parse gpio status function\",\n                \"type\": \"string\",\n                \"default\": \"return body[pin] === true;\"\n            } \n        },\n        \"required\": [\"gpioList\", \n                     \"requestTimeout\",\n                     \"switchPanelBackgroundColor\",\n                     \"gpioStatusRequest\",\n                     \"gpioStatusChangeRequest\",\n                     \"parseGpioStatusFunction\"]\n    },\n    \"form\": [\n        \"gpioList\",\n        \"requestTimeout\",\n        {\n            \"key\": \"switchPanelBackgroundColor\",\n            \"type\": \"color\"\n        },\n        {\n            \"key\": \"gpioStatusRequest\",\n            \"items\": [\n                \"gpioStatusRequest.method\",\n                {\n                    \"key\": \"gpioStatusRequest.paramsBody\",\n                    \"type\": \"json\"\n                }\n            ]\n        },\n        {\n            \"key\": \"gpioStatusChangeRequest\",\n            \"items\": [\n                \"gpioStatusChangeRequest.method\",\n                {\n                    \"key\": \"gpioStatusChangeRequest.paramsBody\",\n                    \"type\": \"json\"\n                }\n            ]\n        },\n        {\n            \"key\": \"parseGpioStatusFunction\",\n            \"type\": \"javascript\"\n        }\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\",\\n   \\\"target\\\":\\\"{$alias}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Custom GPIO\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    }
  ]
}